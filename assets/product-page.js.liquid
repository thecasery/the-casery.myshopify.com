/* This is version 2.0 of Inpage shopping cart
 *
 * The basic strategy is hidding the detail information of the product, and only display it when click the image.
 * Node that most important part is the css. Actually, '.grid__product' are at the same line with same height.
 * But display '.inpage-cart' could make one element pretty high, and the width of 'inpage-cart' could be larger than its parent.
 * So the effects is that '.inpage-cart' takes a whole line. But actually its in the same line with other 'grid__product'
 * 
 * BTW: There're several 'active-' classes that helping us locating current working elements.
 * 'active-product' is current 'grid_product', 'active-'
 */

// Social Media Change: '.back-img' is the share img, 'h1' is product title, '.active-option1' is phone style name
function change_social_media(product){
  // Facebook
  product.find('#facebook').attr("href","https://www.facebook.com/dialog/feed?app_id=1516749411980352&display=page&caption=Welcome%20to%20the%20casery&picture=http:"+product.find('.back-img').attr("src")+"&name="+product.find('h1').text()+"&description="+product.find('.active-option1').attr("name")+"&link=http://the-casery.myshopify.com/collections/all&redirect_uri="+window.location.href+"");
  // Pinterest
  product.find('#pinterest').attr("href","https://pinterest.com/pin/create/button/?url=http://the-casery.myshopify.com/collections/all&amp;media=http:"+product.find('.back-img').attr("src")+"&amp;description="+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")");
  // Twitter
  product.find('#twitter').attr("href","https://twitter.com/share?url=http:"+product.find('.back-img').attr("src")+"&amp;text=The Casery - "+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")");
  // Tumblr
  product.find('#tumblr').attr("href","https://www.tumblr.com/widgets/share/tool?posttype=photo&content="+product.find('.back-img').attr("src")+"&caption="+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")&canonicalUrl=http://the-casery.myshopify.com/collections/all");
}


// initial option3 value, which is picture
function init_option3(product, start_pos, total_options, variants){
  // remove previous image
  $('.active-option3').removeClass('active-option3');
  product.find('#option3 li').remove();

  if (document.documentElement.clientWidth > 768){
    var arr3 = new Array();
    for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0] && variants[i][1] == variants[start_pos][1] && variants[i][2] == variants[start_pos][2]; i++){
      var flag3 = true;
      for (var j = 0; j < arr3.length; j++){
        if (arr3[j] == variants[i][3]){
          flag3 = false;
          break;
        }
      }
      if (flag3){
        arr3.push(variants[i][3]);
        product.find('#option3').append("<li class='grid__item thumbnail-img'><img style='display:inline-block; width:100px;' src='"+variants[i][4]+"' /></li>");
      }
    }
    // reset '.back-img', '.active-option3', reset social media
    product.find('#option3 img').first().addClass("active-option3");
    product.find('.back-img').attr("src", $('.active-option3').attr("src"));
  } else {
    product.find('#option3').parent().css('display','none');
    product.find('.back-img').parent().removeClass('four-fifths');
  }

  change_social_media(product);
}

// initial option2 value, which is phone type
function init_option2(product, start_pos, total_options, variants){
  product.find('#option2 option').remove();
  var arr2 = new Array();
  for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0] && variants[i][1] == variants[start_pos][1]; i++){
    var flag2 = true;
    for (var j = 0; j < arr2.length; j++){
      if (arr2[j] == variants[i][2]){
        flag2 = false;
        break;
      }
    }
    if (flag2){
      arr2.push(variants[i][2]);
      product.find('#option2').append("<option value='"+i+"'>"+variants[i][2]+"</option>");
    }
  }

  // reset start_pos for init_option3, reset selectIndex for hidden select & option2 select
  product.find('#productSelect').get(0).selectedIndex = start_pos;
  product.find('#option2').get(0).selectedIndex = 0; 
  init_option3(product, start_pos, total_options, variants);
}

// initial option1 value, which is phone style
function init_option1(product, start_pos, total_options, variants){
  // remove previous image
  $('.active-option1').removeClass('active-option1');
  product.find('#option1 img').remove();

  var arr1 = new Array();
  for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0]; i++){
    var flag1 = true;
    for (var j = 0; j < arr1.length; j++){
      if (arr1[j] == variants[i][1]){
        flag1 = false;
        break;
      }
    }
    if (flag1){
      arr1.push(variants[i][1]);
      product.find('#option1').append("<img name='"+variants[i][1]+"' src='"+variants[i][4]+"' onmouseover=\"this.style.cursor='hand'\"/>");
    }
  }

  // reset start_pos for init_option2
  product.find('#option1 img').first().addClass('active-option1');
  init_option2(product, start_pos, total_options, variants);
}

// initialize all the variants!!
function init_variants(product){
  var productSelect = product.find('#productSelect');
  var product_options = productSelect.find('option');
  var total_options = product_options.length;
  var variants = new Array();
  var casetype = false;

  // string split, I use ' @ ' to seperate different options
  for (var i = 0; i < total_options; i++){
    var string = product_options.eq(i).text();
    var t = string.split(' @ ');
    // if there's casetype, then we need to split the first option1 string
    if (t[1].indexOf(' - ') >= 0){
      var temp = t[1].split(' - ');
      t[0] = temp[1];
      t[1] = temp[0];
      casetype = true;
    } else {
      t[0] = 'NONE';
    }
    variants.push(t);
  }
  // if there's casetype, we need to enable button
  if (casetype){
    product.find('#option0').css('display','block');
  } else {
    product.find('#option0').css('display','none');
  }

  // reset start_pos for init_option1
  product.find('#option0 span').first().addClass('active-option0');
  init_option1(product, 0, total_options, variants);
}


/* Part 2 : Updating */
// update option0
function change_option0(self, total_options, variants){
  var product = self.parents('.inpage-cart');
  var id = self.attr('id');

  $('.active-option0').removeClass('active-option0');
  self.addClass('active-option0');
  if (id.indexOf('Snap') >= 0){
    init_option1(product, 0, total_options, variants);
  }
  else{
    var i = 0;
    for (; i < total_options && variants[i][0].indexOf('Tough') < 0; i++);
    init_option1(product, i, total_options, variants);
  }
}

// update option1
function change_option1(self, total_options, variants){
    var product = self.parents('.inpage-cart');
    // remove all active-image class which highlight the border, and we need to remove previous
    $('.active-option1').removeClass('active-option1');
    self.addClass('active-option1');

    // After pre-set, find the first index that have the same picture url, that is the start of variant.option1
    var new_option1_name = self.attr("name");
    var current_index = product.find('#productSelect').get(0).selectedIndex;

    var new_index = 0;
    for (; new_index < total_options && variants[new_index][0] != variants[current_index][0]; new_index ++);
    for (; new_index < total_options && variants[new_index][0] == variants[current_index][0] && variants[new_index][1] != new_option1_name; new_index++);

    // initial option2
    init_option2(product, new_index, total_options, variants);
}

// update option2
function change_option2(self, total_options, variants){
  var product = self.parents('.inpage-cart');
  // find new index
  var new_index = product.find('#option2').val();
  product.find('#productSelect').get(0).selectedIndex = new_index;

  // initial option3
  init_option3(product, new_index, total_options, variants);
}

// update option3
function change_option3(self, total_options, variants){
  var product = self.parents('.inpage-cart');
  
  product.find('.back-img').attr("src",self.attr("src"));
  $('.active-option3').removeClass("active-option3");
  self.addClass("active-option3");

  // social media
  change_social_media(product);
}

/* Try not to use $(this) or other things, only use the parameter in this function */
function product_click(cart){
  var productSelect = cart.find('#productSelect');
  var product_options = productSelect.find('option');
  var total_options = product_options.length;
  var variants = new Array();
  var casetype = false;

  // string split, I use ' @ ' to seperate different options
  for (var i = 0; i < total_options; i++){
    var string = product_options.eq(i).text();
    var t = string.split(' @ ');
    // if there's casetype, then we need to split the first option1 string
    if (t[1].indexOf(' - ') >= 0){
      var temp = t[1].split(' - ');
      t[0] = temp[1];
      t[1] = temp[0];
      casetype = true;
    } else {
      t[0] = 'NONE';
    }
    variants.push(t);
  }

  /* change value of option 0 */
  cart.find('#option0').off('click','span').on('click', 'span', function(){
    change_option0($(this), total_options, variants);
  });

  /* change value of option 1 */
  cart.find('#option1').off('click','img').on('click', 'img', function(){
    change_option1($(this), total_options, variants);
  });

  /* change value of option2 */
  // don't forget to off everything before register new event, to avoid multiple calls
  cart.find('#option2').unbind('change').change(function(){
    change_option2($(this), total_options, variants);
  });

  /* change value of option3 */
  //This is easy, just image change. But note that JQuery 1.7+ use 'on' method to replace bind, delegate, etc.
  cart.find('#option3').off('click','img').on('click','img',function(){
    change_option3($(this), total_options, variants);
  });
}


/* This is the main function of shopping cart */
var shopping_cart = function(){
  /* Here's main part of animation
   * Besides regular slideUp & Down, we need to check if current product posistion vs. previous product
   * if ==, just change content, no animation
   * if <>, the screen should animate accordingly
   * BTW, current_activate is used to determine whether a new cart should be slide down;
   * different_product is used to detect whether two product are the same
  */
  var cart=$('.test');
  init_variants(cart);
  product_click(cart);
}

$(document).ready(shopping_cart);