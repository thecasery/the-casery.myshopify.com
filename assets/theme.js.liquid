/* Simple jQuery Equal Heights @version 1.5.1. Copyright (c) 2013 Matt Banks. Dual licensed under the MIT and GPL licenses. */
!function(a){a.fn.equalHeights=function(){var b=0,c=a(this);return c.each(function(){var c=a(this).innerHeight();c>b&&(b=c)}),c.css("height",b)},a("[data-equal]").each(function(){var b=a(this),c=b.data("equal");b.find(c).equalHeights()})}(jQuery);

/* Run function after window resize */
var afterResize=(function(){var t={};return function(callback,ms,uniqueId){if(!uniqueId){uniqueId="Don't call this twice without a uniqueId";}if(t[uniqueId]){clearTimeout(t[uniqueId]);}t[uniqueId]=setTimeout(callback,ms);};})();

window.theme = window.theme || {};

// Facebook api
window.fbAsyncInit = function() {
  FB.init({
    appId      : '1516749411980352',
    xfbml      : true,
    version    : 'v2.5'
  });
};

(function(d, s, id){
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));

theme.cacheSelectors = function () {
  theme.cache = {
    // General
    $w: $(window),
    $body: $('body'),

    // Mobile Nav
    $mobileNavTrigger: $('#MobileNavTrigger'),
    $mobileNav: $('#MobileNav'),
    $mobileSublistTrigger: $('.mobile-nav__sublist-trigger'),

    // Equal height elements
    $productGridImages: $('.grid-link__image--product'),
    $featuredGridImages: $('.grid-link__image--collection'),
    
    // Product page
    $productImage: $('#ProductPhotoImg'),
    $productImageGallery: $('.gallery__item'),

    // Cart Page
    cartNoteAdd: '.cart__note-add',
    cartNote: '.cart__note'
  }
};

theme.init = function () {
  theme.cacheSelectors();
  theme.mobileNav();
  theme.equalHeights();
  theme.cartPage();
};

theme.mobileNav = function () {
  theme.cache.$mobileNavTrigger.on('click', function() {
    theme.cache.$mobileNav.slideToggle(220);
  });

  theme.cache.$mobileSublistTrigger.on('click', function(evt) {
    var $el = $(this);

    // Enable commented out if statement to allow direct clicking on trigger link
    // if (!$el.hasClass('is-active')) {
      evt.preventDefault();
      $el.toggleClass('is-active').next('.mobile-nav__sublist').slideToggle(200);
    // }
  });
};

theme.equalHeights = function () {
  theme.cache.$w.on('load', resizeElements());

  theme.cache.$w.on('resize',
    afterResize(function() {
      resizeElements();
    }, 250, 'equal-heights')
  );

  function resizeElements() {
    theme.cache.$productGridImages.css('height', 'auto').equalHeights();
    theme.cache.$featuredGridImages.css('height', 'auto').equalHeights();
  }
};

theme.cartPage = function () {
  {% unless settings.cart_notes_enable %}
    return;
  {% endunless %}

  theme.cache.$body.on('click', theme.cache.cartNoteAdd, function () {
    $(this).addClass('is-hidden');
    $(theme.cache.cartNote).addClass('is-active');
    ajaxifyShopify.sizeDrawer();
  });
};

// Initialize theme's JS on docready
$(theme.init);

/* Belowing is implemented by Yang Wang @thecasery.Inc 2015 */

/* The autoscale element function is used for adjusting picture size and location according to screen size.
 * The container size is set to current screen size.
 * The inside element size is set to 2:1. if it's largger than 2:1, we cut some of the width;
 *   if it's smaller than 2:1, we cut some of the height.
 * 
 * To realize this function, don't forget to set container "overflow:hidden", and use margin to set element position.
 */
var autoscale_element = function(){
  var picture_height, picture_width, margin_top, margin_left; 
  var mobile_device = false;  
  if (document.documentElement.clientWidth <= 768){
    mobile_device = true;
  } else {
    mobile_device = false;
  }

  if (mobile_device){
    picture_width = document.documentElement.clientWidth;
    picture_height = picture_width;

    $('.autoscale__div').css('height', picture_height);
    $('.autoscale__div').css('width', picture_width);
    picture_width = picture_height * 2;
    margin_left = ($('.autoscale__div').width() - picture_width) / 2;
    margin_top = 0;

    // This is a side function, just to adjust slider's navigation-bar position
    $('.slider-nav').css('top', $('.slide-img').height() - 30);
    $('.slider-nav').css('left', ($('.slide-img').width()-180) / 2);
  } else {
    // At this point, pic_width & height are screen size, used to set div size.
    picture_height = document.documentElement.clientHeight-30;
    $('.autoscale__div').css('height', picture_height);
    $('.autoscale__div').css('width', '100%');
    $('.autoscale__div').css('margin-top','-10px');
    picture_width = $('.autoscale__div').width();

    // Adjust picture width:height to 2:1
    if (picture_height < 600 && picture_width < 1200) {
      picture_height = 600;
      picture_width = 1200;
    } else if (picture_height * 2 < picture_width) {
      picture_height = picture_width / 2;
    } else {
      picture_width = picture_height * 2;
    }

    // calculate margin to adjust picture position, make it at center.
    margin_top = (document.documentElement.clientHeight - 50 - picture_height) / 2;
    margin_left = ($('.autoscale__div').width() - picture_width) / 2;

    // This is a side function, just to adjust slider's navigation-bar position
    $('.slider-nav').css('top', $('.slide-img').height() - 70);
    $('.slider-nav').css('left', ($('.slide-img').width()-200) / 2);
  }
  $('.autoscale__elem').css('height', picture_height);
  $('.autoscale__elem').css('width', picture_width);

  $('.autoscale__elem').css('margin-left', margin_left);
  $('.autoscale__elem').css('margin-top', margin_top);

  // Also here's width of inpage-cart to be whole page
  if ($('.active-cart').hasClass('active-cart')){
    $('.active-cart').css('width', document.documentElement.clientWidth);
    if ($('.active-cart').parent().hasClass('grid__product')){
      $('.active-cart').css('margin-left', 0 - $('.active-product').offset().left - 10);
    } else {
      $('.active-cart').css('margin-left', 0);
    }
  }
};

if ((typeof Shopify) == 'undefined') {
  var Shopify = {};
}

/* This is version 2.0 of Inpage shopping cart
 *
 * The basic strategy is hidding the detail information of the product, and only display it when click the image.
 * Node that most important part is the css. Actually, '.grid__product' are at the same line with same height.
 * But display '.inpage-cart' could make one element pretty high, and the width of 'inpage-cart' could be larger than its parent.
 * So the effects is that '.inpage-cart' takes a whole line. But actually its in the same line with other 'grid__product'
 * 
 * BTW: There're several 'active-' classes that helping us locating current working elements.
 * 'active-product' is current 'grid_product', 'active-'
 */

// Social Media Change: '.back-img' is the share img, 'h1' is product title, '.active-option1' is phone style name
function change_social_media(product){
  // Facebook
  product.find('#facebook').attr("href","https://www.facebook.com/dialog/feed?app_id=1516749411980352&display=page&caption=Welcome%20to%20the%20casery&picture=http:"+product.find('.back-img').attr("src")+"&name="+product.find('h1').text()+"&description="+product.find('.active-option1').attr("name")+"&link=http://the-casery.myshopify.com/collections/all&redirect_uri="+window.location.href+"");
  // Pinterest
  product.find('#pinterest').attr("href","https://pinterest.com/pin/create/button/?url=http://the-casery.myshopify.com/collections/all&amp;media=http:"+product.find('.back-img').attr("src")+"&amp;description="+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")");
  // Twitter
  product.find('#twitter').attr("href","https://twitter.com/share?url=http:"+product.find('.back-img').attr("src")+"&amp;text=The Casery - "+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")");
  // Tumblr
  product.find('#tumblr').attr("href","https://www.tumblr.com/widgets/share/tool?posttype=photo&content="+product.find('.back-img').attr("src")+"&caption="+product.find('h1').text()+" ("+product.find('.active-option1').attr("name")+")&canonicalUrl=http://the-casery.myshopify.com/collections/all");
}


// initial option3 value, which is picture
function init_option3(product, start_pos, total_options, variants){
  // remove previous image
  $('.active-option3').removeClass('active-option3');
  $('.active-dot').removeClass('active-dot');
  product.find('#option3 div').remove();
  product.find('.dot').remove();

  var arr3 = new Array();
  for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0] && variants[i][1] == variants[start_pos][1] && variants[i][2] == variants[start_pos][2]; i++){
    var flag3 = true;
    for (var j = 0; j < arr3.length; j++){
      if (arr3[j] == variants[i][3]){
        flag3 = false;
        break;
      }
    }
    if (flag3){
      arr3.push(variants[i][3]);
      product.find('#option3').append("<div class='thumbnail-img'><img style='display:inline; width:18%;' src='"+variants[i][4]+"' /></div>");
      if (document.documentElement.clientWidth <= 768){
        product.find('.slider-dots').append('<li class="dot">&bull;</li>');
      }
    }
  }
  // reset '.back-img', '.active-option3', reset social media
  product.find('#option3 img').first().addClass("active-option3");
  product.find('.back-img').attr("src", $('.active-option3').attr("src"));
  if (document.documentElement.clientWidth <= 768){
    product.find('.dot').first().addClass('active-dot');
    product.find('.slider-dots').css('left',$('.back-img').offset().left + ($('.back-img').width() - $('.slider-dots').width() + 10) / 2);
    product.find('.slider-dots').css('top',$('.back-img').offset().top + $('.back-img').height() - 50);
  }
  change_social_media(product);
}

// initial option2 value, which is phone type
function init_option2(product, start_pos, total_options, variants){
  product.find('#option2 option').remove();
  var arr2 = new Array();
  for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0] && variants[i][1] == variants[start_pos][1]; i++){
    var flag2 = true;
    for (var j = 0; j < arr2.length; j++){
      if (arr2[j] == variants[i][2]){
        flag2 = false;
        break;
      }
    }
    if (flag2){
      arr2.push(variants[i][2]);
      product.find('#option2').append("<option value='"+i+"'>"+variants[i][2]+"</option>");
    }
  }

  // reset start_pos for init_option3, reset selectIndex for hidden select & option2 select
  product.find('#productSelect').get(0).selectedIndex = start_pos;
  product.find('#option2').get(0).selectedIndex = 0; 
  init_option3(product, start_pos, total_options, variants);
}

// initial option1 value, which is phone style
function init_option1(product, start_pos, total_options, variants){
  // remove previous image
  $('.active-option1').removeClass('active-option1');
  product.find('#option1 div').remove();

  var arr1 = new Array();
  for (var i = start_pos; i < total_options && variants[i][0] == variants[start_pos][0]; i++){
    var flag1 = true;
    for (var j = 0; j < arr1.length; j++){
      if (arr1[j] == variants[i][1]){
        flag1 = false;
        break;
      }
    }
    if (flag1){
      arr1.push(variants[i][1]);
      product.find('#option1').append("<div class='option1-outer-container' name='"+variants[i][1]+"' onmouseover=\"this.style.cursor='hand'\"><div style='background-color:"+variants[i][1]+"; width:25px; height:25px;'></div></div>");
    }
  }

  // reset start_pos for init_option2
  product.find('#option1 .option1-outer-container').first().addClass('active-option1');
  init_option2(product, start_pos, total_options, variants);
}

// initialize all the variants!!
function init_variants(product){
  var productSelect = product.find('#productSelect');
  var product_options = productSelect.find('option');
  var total_options = product_options.length;
  var variants = new Array();
  var casetype = false;

  // string split, I use ' @ ' to seperate different options
  for (var i = 0; i < total_options; i++){
    var string = product_options.eq(i).text();
    var t = string.split(' @ ');
    // if there's casetype, then we need to split the first option1 string
    if (t[1].indexOf(' - ') >= 0){
      var temp = t[1].split(' - ');
      t[0] = temp[1];
      t[1] = temp[0];
      casetype = true;
    } else {
      t[0] = 'NONE';
    }
    variants.push(t);
  }
  // if there's casetype, we need to enable button
  if (casetype){
    product.find('#option0').css('display','block');
  } else {
    product.find('#option0').css('display','none');
  }

  // reset start_pos for init_option1
  product.find('#option0 span').first().addClass('active-option0');
  init_option1(product, 0, total_options, variants);
}


/* Part 2 : Updating */
// update option0
function change_option0(option, cart, total_options, variants){
  var id = option.attr('id');

  $('.active-option0').removeClass('active-option0');
  option.addClass('active-option0');
  if (id.indexOf('Snap') >= 0){
    init_option1(cart, 0, total_options, variants);
  }
  else{
    var i = 0;
    for (; i < total_options && variants[i][0].indexOf('Tough') < 0; i++);
    init_option1(cart, i, total_options, variants);
  }
}

// update option1
function change_option1(option, cart, total_options, variants){
    // remove all active-image class which highlight the border, and we need to remove previous
    $('.active-option1').removeClass('active-option1');
    option.addClass('active-option1');

    // After pre-set, find the first index that have the same picture url, that is the start of variant.option1
    var new_option1_name = option.attr("name");
    var current_index = cart.find('#productSelect').get(0).selectedIndex;

    var new_index = 0;
    for (; new_index < total_options && variants[new_index][0] != variants[current_index][0]; new_index ++);
    for (; new_index < total_options && variants[new_index][0] == variants[current_index][0] && variants[new_index][1] != new_option1_name; new_index++);

    // initial option2
    init_option2(cart, new_index, total_options, variants);
}

// update option2
function change_option2(option, cart, total_options, variants){
  // find new index
  var new_index = cart.find('#option2').val();
  cart.find('#productSelect').get(0).selectedIndex = new_index;

  // initial option3
  init_option3(cart, new_index, total_options, variants);
}

// update option3
function change_option3(option, cart, total_options, variants){
  cart.find('.back-img').attr("src", option.attr("src"));
  $('.active-option3').removeClass("active-option3");
  option.addClass("active-option3");

  // social media
  change_social_media(cart);
}

function change_option3_mobile(direction, cart){
  var next_picture;
  var next_dot;
  if (direction == 'left'){
    if ($('.active-option3').parent().is(':first-child')){
      next_dot = cart.find('.dot').last();
      next_picture = cart.find('#option3 div').last().find('img');
    } else {
      next_dot = $('.active-dot').prev();
      next_picture = $('.active-option3').parent().prev().find('img');
    }
  } else if (direction == 'right'){
    if ($('.active-option3').parent().is(':last-child')){
      next_dot = cart.find('.dot').first();
      next_picture = cart.find('#option3 div').first().find('img');
    } else {
      next_dot = $('.active-dot').next();
      next_picture = $('.active-option3').parent().next().find('img');
    }
  }

  cart.find('.back-img').attr("src", next_picture.attr("src"));
  $('.active-option3').removeClass('active-option3');
  $('.active-dot').removeClass('active-dot');
  next_dot.addClass('active-dot');
  next_picture.addClass('active-option3');

  // social media
  change_social_media(cart);
}

/* Try not to use $(this) or other things, only use the parameter in this function */
function product_click(cart){
  var productSelect = cart.find('#productSelect');
  var product_options = productSelect.find('option');
  var total_options = product_options.length;
  var variants = new Array();
  var casetype = false;

  // string split, I use ' @ ' to seperate different options
  for (var i = 0; i < total_options; i++){
    var string = product_options.eq(i).text();
    var t = string.split(' @ ');
    // if there's casetype, then we need to split the first option1 string
    if (t[1].indexOf(' - ') >= 0){
      var temp = t[1].split(' - ');
      t[0] = temp[1];
      t[1] = temp[0];
      casetype = true;
    } else {
      t[0] = 'NONE';
    }
    variants.push(t);
  }

  /* change value of option 0 */
  cart.find('#option0').off('click','span').on('click', 'span', function(){
    change_option0($(this), cart, total_options, variants);
  });

  /* change value of option 1 */
  cart.find('#option1').off('click','.option1-outer-container').on('click', '.option1-outer-container', function(){
    change_option1($(this), cart, total_options, variants);
  });

  /* change value of option2 */
  // don't forget to off everything before register new event, to avoid multiple calls
  cart.find('#option2').unbind('change').change(function(){
    change_option2($(this), cart, total_options, variants);
  });

  /* change value of option3 */
  //This is easy, just image change. But note that JQuery 1.7+ use 'on' method to replace bind, delegate, etc.
  if (document.documentElement.clientWidth > 768){
    cart.find('#option3').off('click','img').on('click','img',function(){
      change_option3($(this), cart, total_options, variants);
    });
  } else {
    // Write a jquery touch swipe detector!
    var xDown = null;
    var yDown = null;
    
    cart.find('.back-img').off('touchstart').on('touchstart', function(e){
      xDown = e.originalEvent.touches[0].pageX;
      yDown = e.originalEvent.touches[0].pageY;
    });

    cart.find('.back-img').off('touchmove').on('touchmove', function(e){
      if ( !xDown || !yDown) {
        return;
      }
      var xUp = e.originalEvent.touches[0].pageX;
      var yUp = e.originalEvent.touches[0].pageY;
      var xDiff = xDown - xUp;
      var yDiff = yDown - yUp;

      if ( Math.abs(yDiff) <= Math.abs(xDiff) && xDiff > 8 ) { 
        change_option3_mobile('left', cart);
      } else if ( Math.abs(yDiff) <= Math.abs(xDiff) && xDiff < -8){
        change_option3_mobile('right', cart);
      }

      /* reset values */
      xDown = null;
      yDown = null; 
    });
  }
}


/* This is the main function of shopping cart */
var inpage_shopping_cart = function(){
  /* Here's main part of animation
   * Besides regular slideUp & Down, we need to check if current product posistion vs. previous product
   * if ==, just change content, no animation
   * if <>, the screen should animate accordingly
   * BTW, current_activate is used to determine whether a new cart should be slide down;
   * different_product is used to detect whether two product are the same
  */
  // When user clicking close button at top-right of slide-down cart
  $('.grid__product').off('click','.inpage-cart__close').on('click','.inpage-cart__close',function(){
    $('.active-product').find('.arrow-up').animate({opacity : 0}, 'middle');
    $('.active-cart').removeClass('active-cart').slideUp('middle');
    $("html, body").animate({ scrollTop: $('.active-product').offset().top - 80 }, 'middle');
    $('.active-product').removeClass('active-product');
  });

  $('.grid__product').off('click','.grid-link__image-centered').on('click','.grid-link__image-centered',function(){
    var current_activate, different_product = false;
    var prev_pos;
    if ($(this).parents('.grid__product').hasClass('active-product')){
      current_activate = false;
    }
    else{
      current_activate = true;
      if ($('.active-product').hasClass('active-product')){
        prev_pos = $('.active-product').offset().top;
        different_product = true;
      } else {
        prev_pos = $(this).parents('.grid__product').offset().top;
      }
    }
    // slide up previous cart
    $('.active-product').find('.arrow-up').animate({opacity : 0}, 'middle');
    $('.active-product').removeClass('active-product');
    if (different_product && prev_pos == $(this).parents('.grid__product').offset().top){
      $('.active-cart').removeClass('active-cart').css('display','none');
    } else {
      $('.active-cart').removeClass('active-cart').slideUp('middle');
    }

    // slide down new cart
    if (current_activate){
      $(this).parents('.grid__product').find('.arrow-up').animate({opacity : 1}, 'middle');
      $(this).parents('.grid__product').addClass('active-product');
      if (different_product && prev_pos == $(this).parents('.grid__product').offset().top){
        $(this).parents('.grid__product').find('.inpage-cart').addClass('active-cart').css('display','block');
      } else {
        $(this).parents('.grid__product').find('.inpage-cart').addClass('active-cart').slideDown("middle");
      }
      // screen scroll
      $('.active-cart').css("width", document.documentElement.clientWidth);
      $('.active-cart').css("margin-left", 0 - $('.active-product').offset().left - 10);
      if (prev_pos == $('.active-product').offset().top){
        $("html, body").animate({ scrollTop: prev_pos - 80 }, 0);
      } else if (prev_pos < $('.active-product').offset().top){
        $("html, body").animate({ scrollTop: prev_pos + 280}, "middle");
      } else {
        $("html, body").animate({ scrollTop: $('.active-product').offset().top - 80}, "middle");
      }
      var cart = $(this).parents('.grid__product').find('.inpage-cart');
      init_variants(cart);
      product_click(cart);

      /* Small change on slide-down cart alignment */
      cart.css("width", document.documentElement.clientWidth);
      cart.css("margin-left", 0 - cart.parent().offset().left);
    }
  });

  // When user hovering product, change picture
  $('.grid__product').hover(function(){
    $(this).find('.product-img').css('display','none');
    $(this).find('.product-img__second').css('display','block');
  }, function(){
    $(this).find('.product-img__second').css('display','none');
    $(this).find('.product-img').css('display','block');
  });
}

/* artist_page animation*/
// There might be some bugs
var artist_page = function(){
  $('.artist-container').off('click').on('click',function(){
    var name = $(this).find('.artist-name h3').text();
    var description = $(this).find('.artist-name h3').text();
    window.location.href = "http://the-casery.myshopify.com/collections/vendors?q="+name+"&intro="+$(this).find('.artist-name h5').text()+"&img="+$(this).find('.artist-name h6').text();
  });
}

// slider
var next_pic = function(){
  $('.slide-img').stop(true, true);
  var currentSlide = $('.active-img'),
      currentDot = $('.active-dot'),
      nextDot = currentDot.next();
      nextSlide = currentSlide.next();
  if (nextDot.length == 0){
      nextSlide = $('.slide-img').first();
      nextDot = $('.dot').first();
  }
  
  // animation: The front_slide is crutial, fix the position of the small number picture.
  // Otherwise, the small element cannot on top of large number element.
  var front_slide = (currentSlide.index() < nextSlide.index()) ? (currentSlide) : (nextSlide);
  front_slide.css("position", "absolute");

  nextSlide.addClass('active-img').fadeIn("slow", function(){
      currentSlide.removeClass('active-img').css("display","none");
      front_slide.css("position","static");
  });
  
  currentDot.removeClass('active-dot');
  nextDot.addClass('active-dot');
}

var prev_pic = function(){
  $('.slide-img').stop(true, true);
  var currentSlide = $('.active-img'),
      currentDot = $('.active-dot'),
      prevDot = currentDot.prev();
      prevSlide = currentSlide.prev();
  if (prevDot.length == 0){
      prevSlide = $('.slide-img').last();
      prevDot = $('.dot').last();
  }
  
  //animation
  var front_slide = (currentSlide.index() < prevSlide.index()) ? (currentSlide) : (prevSlide);
  front_slide.css("position", "absolute");
  prevSlide.addClass('active-img').fadeIn("slow", function(){
    currentSlide.removeClass('active-img').css("display","none");
    front_slide.css("position","static");
  });
  
  currentDot.removeClass('active-dot');
  prevDot.addClass('active-dot');
}

// click on dot to change pictures
var change_pic = function(){
  $('.slide-img').stop(true, true);
  var currentSlide = $('.active-img'),
      currentDot = $('.active-dot'),
      nextDot = currentDot,
      nextSlide = currentSlide;

  if ($(this).hasClass('active-dot')) return;

  // index technique, very important
  var index = $(this).index();
  nextDot = $('.dot').eq(index);
  nextSlide = $('.slide-img').eq(index);

  //animation
  var front_slide = (currentSlide.index() < nextSlide.index()) ? (currentSlide) : (nextSlide);
  front_slide.css("position", "absolute");
  nextSlide.addClass('active-img').fadeIn("slow", function(){
    currentSlide.removeClass('active-img').css("display","none");
    front_slide.css("position","static");
  });
  
  currentDot.removeClass('active-dot');
  nextDot.addClass('active-dot');
}

var carousel_setting = function(){
  // Initialization of first image and dot, interval time
  $(".dot").first().addClass('active-dot');
  $(".slide-img").first().css("display","block");
  $(".slide-img").first().addClass('active-img');

  var speed = {{ settings.slider_home_rate }};
  var auto_slide = setInterval(next_pic, speed);

  $('.arrow-next').click(next_pic);
  $('.arrow-prev').click(prev_pic);
  $('.dot').click(change_pic);
  $('.slider-nav').hover(function(){
    clearInterval(auto_slide);
  }, function(){
    auto_slide = setInterval(next_pic, speed);
  });
}

function urldecode(str) {
   return decodeURIComponent((str+'').replace(/\+/g, '%20'));
}

var page_init = function(){
  var page_type      = $('#page-type').text();
  var page_url       = window.location.href;     // Returns full URL
  var page_width     = document.documentElement.clientWidth;

  if (page_url.indexOf('vendors') >= 0){
    var section = page_url.split('&');
    var artist_name = urldecode(section[0].split('=')[1]);
    var artist_intro = urldecode(section[1].split('=')[1]);
    var artist_img = section[2].split('=')[1];
    $('.artist-header h1').text(artist_name);
    $('.artist-intro').text(artist_intro);
    $('.artist-header').css('background-image',"url("+artist_img+")");

    if (page_width > 768){
      $('.artist-content').css('display','block');
      $('.mobile-artist-content').css('display','none');
      var carts = $('.artist-cart');
      for (var i = 0; i < carts.length; i++){
        var cart = carts.eq(i);
        init_variants(cart);
        product_click(cart);
      }
    } else {
      $('.artist-content').css('display','none');
      $('.mobile-artist-content').css('display','block');
    }
  } else if (page_url.indexOf('artist-collection') >= 0){
    artist_page();
  } else if (page_type.indexOf('collection') >= 0 || page_type.indexOf('index') >= 0){
    if (page_width > 768){
      $('.trigger__mobile').attr('href', 'javascript:');
      inpage_shopping_cart();
    } else {
      $('.grid__mobile-info').css('display','block');
      $('.arrow-up').css('display','none');
    }

    if (page_type.indexOf('index') >= 0){
      carousel_setting();
      autoscale_element();
      window.onresize = autoscale_element;
    }
  } else if (page_type.indexOf('product') >= 0){
    if (page_width > 768){
      $('.trigger__mobile').attr('href', 'javascript:');
      $('.mobile-shopping-cart').css('display','none');
      $('.success-add__container').css('display','block');
      inpage_shopping_cart();
    } else {
      $('.grid__mobile-info').css('display','block');
      $('.mobile-shopping-cart').css('display','block');
      $('.success-add__container').css('display','none');
      $('.arrow-up').css('display','none');

      var cart=$('.mobile-shopping-cart');
      init_variants(cart);
      product_click(cart);
    }
  }
}

$(document).ready(page_init);